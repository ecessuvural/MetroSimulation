# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-nOrHoqrrQM9trWm7rcEJZWUjXhNBUJs
"""

from collections import defaultdict, deque
import heapq
from typing import Dict, List, Set, Tuple, Optional
import matplotlib.pyplot as plt
import networkx as nx

class Istasyon:
    def __init__(self, idx: str, ad: str, hat: str):
        self.idx = idx #İstasyonun kimliği
        self.ad = ad   #İstasyonun adı
        self.hat = hat #K1,M1,T1 VB.
        self.komsular: List[Tuple['Istasyon', int]] = []  # (istasyon, süre) tuple'ları

    def komsu_ekle(self, istasyon: 'Istasyon', sure: int):
        self.komsular.append((istasyon, sure))

    def __lt__(self, other: 'Istasyon'):
        return self.idx < other.idx  # İstasyonlar, idx'lerine göre karşılaştırılacak


class MetroAgi:
    def __init__(self):
        self.istasyonlar: Dict[str, Istasyon] = {}
        self.hatlar: Dict[str, List[Istasyon]] = defaultdict(list)

    def istasyon_ekle(self, idx: str, ad: str, hat: str) -> None:
        if id not in self.istasyonlar:
            istasyon = Istasyon(idx, ad, hat)
            self.istasyonlar[idx] = istasyon
            self.hatlar[hat].append(istasyon)

    def baglanti_ekle(self, istasyon1_id: str, istasyon2_id: str, sure: int) -> None:
      #İki istasyon arasında bağlantı oluşturulur ve süre belirlenir.
        istasyon1 = self.istasyonlar[istasyon1_id]
        istasyon2 = self.istasyonlar[istasyon2_id]
        istasyon1.komsu_ekle(istasyon2, sure)
        istasyon2.komsu_ekle(istasyon1, sure)

    def en_az_aktarma_bul(self, baslangic_id: str, hedef_id: str) -> Optional[List[Istasyon]]:
      #başlangic_id ve hedef_id yoksa None döndürülecek.
        if baslangic_id not in self.istasyonlar or hedef_id not in self.istasyonlar:
            return None

        baslangic = self.istasyonlar[baslangic_id]
        hedef = self.istasyonlar[hedef_id]

        #BFS algoritması için kuyruklar oluşturuldu.
        kuyruk = deque([(baslangic, [baslangic], baslangic.hat, 0)])
        ziyaret_edilenler = set()

        #Kuyruktan bir düğüm çıkarılır ve hedefe ulaşıldıysa yol döndürülür.
        while kuyruk:
            mevcut_istasyon, yol, son_hat, aktarma_sayisi = kuyruk.popleft()

            if mevcut_istasyon == hedef:
                return yol

            for komsu, _ in mevcut_istasyon.komsular:
                yeni_aktarma = aktarma_sayisi + (1 if komsu.hat != son_hat else 0)

             #İstasyon önceden ziyaret edilmediyse eklenir.
                if (komsu, yeni_aktarma) not in ziyaret_edilenler:
                    ziyaret_edilenler.add((komsu, yeni_aktarma))
                    kuyruk.append((komsu, yol + [komsu], komsu.hat, yeni_aktarma))

        #Uygun bir rota yoksa None döndürülecek.
        return None


    def en_hizli_rota_bul(self, baslangic_id: str, hedef_id: str) -> Optional[Tuple[List[Istasyon], int]]:
        if baslangic_id not in self.istasyonlar or hedef_id not in self.istasyonlar:
            return None

        def heuristic(istasyon: Istasyon, hedef: Istasyon) -> int:
            min_sure = min((sure for _, sure in istasyon.komsular), default=3)  # Varsayılan süre 3 dakika
            return min_sure if istasyon.hat != hedef.hat else 0

        baslangic = self.istasyonlar[baslangic_id]
        hedef = self.istasyonlar[hedef_id]

        #heapq kullanılarak en kısa süre hesaplanacak. Heapq sayesinde en küçük değer çıkacak.
        pq = [(heuristic(baslangic, hedef), 0, 0, baslangic, [baslangic])]
        ziyaret_edildi = {}

        while pq:
            _, toplam_sure, aktarma_sayisi, mevcut_istasyon, yol = heapq.heappop(pq)
        #En hızlı güzergah ve süre döndürülecek.
            if mevcut_istasyon == hedef:
                return (yol, toplam_sure)


            if mevcut_istasyon in ziyaret_edildi:
                onceki_sure, onceki_aktarma = ziyaret_edildi[mevcut_istasyon]
                if onceki_sure <= toplam_sure and onceki_aktarma <= aktarma_sayisi:
                    continue

            ziyaret_edildi[mevcut_istasyon] = (toplam_sure, aktarma_sayisi)

            for komsu, sure in mevcut_istasyon.komsular:
                yeni_sure = toplam_sure + sure
                yeni_aktarma = aktarma_sayisi + (1 if komsu.hat != mevcut_istasyon.hat else 0)
                heapq.heappush(pq, (yeni_sure + heuristic(komsu, hedef), yeni_sure, yeni_aktarma, komsu, yol + [komsu]))

        #Hedef istasyon için bir yol yoksa None döndürülüyor.
        return None



def plot_metro_graph():
    # Yeni bir grafik oluşturuyoruz
    G = nx.Graph()

    # İstasyonları ekliyoruz
    stations = {
        # Kırmızı Hat
        "K1": "Kızılay", "K2": "Ulus", "K3": "Demetevler", "K4": "OSB",
        # Mavi Hat
        "M1": "AŞTİ", "M2": "Kızılay", "M3": "Sıhhiye", "M4": "Gar",
        # Turuncu Hat
        "T1": "Batıkent", "T2": "Demetevler", "T3": "Gar", "T4": "Keçiören"
    }

    # Bağlantıları ekliyoruz (ağırlıkları da belirliyoruz)
    connections = [
        # Kırmızı Hat bağlantıları
        ("K1", "K2", 4), ("K2", "K3", 6), ("K3", "K4", 8),
        # Mavi Hat bağlantıları
        ("M1", "M2", 5), ("M2", "M3", 3), ("M3", "M4", 4),
        # Turuncu Hat bağlantıları
        ("T1", "T2", 7), ("T2", "T3", 9), ("T3", "T4", 5),
        # Hat aktarma bağlantıları
        ("K1", "M2", 2), ("K3", "T2", 3), ("M4", "T3", 2)
    ]

    # İstasyonları grafiğe ekliyoruz
    for station, label in stations.items():
        G.add_node(station, label=label)

    # Bağlantıları (kenarları) ekliyoruz
    for station1, station2, weight in connections:
        G.add_edge(station1, station2, weight=weight)

    # Hat renkleri ve düğüm renklerini belirliyoruz
    node_colors = {
        "K1": "red", "K2": "red", "K3": "red", "K4": "red",  # Kırmızı Hat
        "M1": "blue", "M2": "blue", "M3": "blue", "M4": "blue",  # Mavi Hat
        "T1": "orange", "T2": "orange", "T3": "orange", "T4": "orange"  # Turuncu Hat
    }

    # İstasyonların yerlerini (koordinatlarını) tanımlıyoruz
    positions = {
        "K1": (0, 2), "K2": (1, 2), "K3": (2, 2), "K4": (3, 2),
        "M1": (0, 1), "M2": (1, 1), "M3": (2, 1), "M4": (3, 1),
        "T1": (0, 0), "T2": (1, 0), "T3": (2, 0), "T4": (3, 0)
    }

    # Bağlantı etiketlerini (ağırlıkları) alıyoruz
    edge_labels = nx.get_edge_attributes(G, 'weight')

    # Grafik üzerinde istasyonları ve bağlantıları çiziyoruz
    plt.figure(figsize=(8, 6))

    # Düğümleri (istasyonları) çizelim
    node_sizes = [1000 for _ in stations]  # Tüm düğümlere aynı boyut
    node_color_list = [node_colors[station] for station in stations]  # Hat renklerine göre düğüm renkleri

    nx.draw_networkx_nodes(G, pos=positions, node_size=node_sizes, node_color=node_color_list)

    # Bağlantıları çizelim
    nx.draw_networkx_edges(G, pos=positions, width=2, edge_color="gray")
    nx.draw_networkx_edge_labels(G, pos=positions, edge_labels=edge_labels)

    # Etiketleri (istasyon isimlerini) çizelim
    nx.draw_networkx_labels(G, pos=positions, font_size=12, font_weight="bold", font_color="black")

    # Başlık ekleyelim
    plt.title("Metro Ağı")

    # Grafiği gösterelim
    plt.axis("off")  # Ekseni gizle
    plt.show()

# Grafik çizme fonksiyonunu çağırıyoruz
plot_metro_graph()


# Senaryoları karşılaştıran bir grafik oluşturabiliriz.
# Çok sayılı senaryolar için karşılaştırma yapılabilir.
def senaryolari_gorsellestir(senaryolar):
    senaryo_adlari = [s["ad"] for s in senaryolar]
    sureler = [s["sure"] for s in senaryolar]

    plt.figure(figsize=(8, 6))
    plt.bar(senaryo_adlari, sureler, color=['red', 'blue', 'green', 'orange'])
    plt.xlabel("Senaryolar")
    plt.ylabel("Süre (dk)")
    plt.title("Senaryolara Göre En Hızlı Rota Süreleri")
    plt.ylim(0, max(sureler) + 5)

    for i, v in enumerate(sureler):
        plt.text(i, v + 0.5, str(v), ha='center', fontsize=12)

    plt.show()

# **Senaryo sürelerini fonksiyondan çekme**
senaryolar = []
senaryo_listesi = [
    ("AŞTİ", "OSB", "M1", "K4"),
    ("Batıkent", "Keçiören", "T1", "T4"),
    ("Keçiören", "AŞTİ", "T4", "M1"),
    ("Keçiören", "Demetevler", "T4", "T2")
]

for baslangic, bitis, kod1, kod2 in senaryo_listesi:
    sonuc = metro.en_hizli_rota_bul(kod1, kod2)
    if sonuc:
        rota, sure = sonuc
        senaryolar.append({"ad": f"{baslangic} → {bitis}", "sure": sure})

senaryolari_gorsellestir(senaryolar)

# Örnek Kullanım
if __name__ == "__main__":
    metro = MetroAgi()

    # İstasyonlar ekleme
    # Kırmızı Hat
    metro.istasyon_ekle("K1", "Kızılay", "Kırmızı Hat")
    metro.istasyon_ekle("K2", "Ulus", "Kırmızı Hat")
    metro.istasyon_ekle("K3", "Demetevler", "Kırmızı Hat")
    metro.istasyon_ekle("K4", "OSB", "Kırmızı Hat")

    # Mavi Hat
    metro.istasyon_ekle("M1", "AŞTİ", "Mavi Hat")
    metro.istasyon_ekle("M2", "Kızılay", "Mavi Hat")  # Aktarma noktası
    metro.istasyon_ekle("M3", "Sıhhiye", "Mavi Hat")
    metro.istasyon_ekle("M4", "Gar", "Mavi Hat")

    # Turuncu Hat
    metro.istasyon_ekle("T1", "Batıkent", "Turuncu Hat")
    metro.istasyon_ekle("T2", "Demetevler", "Turuncu Hat")  # Aktarma noktası
    metro.istasyon_ekle("T3", "Gar", "Turuncu Hat")  # Aktarma noktası
    metro.istasyon_ekle("T4", "Keçiören", "Turuncu Hat")

    # Bağlantılar ekleme
    # Kırmızı Hat bağlantıları
    metro.baglanti_ekle("K1", "K2", 4)  # Kızılay -> Ulus
    metro.baglanti_ekle("K2", "K3", 6)  # Ulus -> Demetevler
    metro.baglanti_ekle("K3", "K4", 8)  # Demetevler -> OSB

    # Mavi Hat bağlantıları
    metro.baglanti_ekle("M1", "M2", 5)  # AŞTİ -> Kızılay
    metro.baglanti_ekle("M2", "M3", 3)  # Kızılay -> Sıhhiye
    metro.baglanti_ekle("M3", "M4", 4)  # Sıhhiye -> Gar

    # Turuncu Hat bağlantıları
    metro.baglanti_ekle("T1", "T2", 7)  # Batıkent -> Demetevler
    metro.baglanti_ekle("T2", "T3", 9)  # Demetevler -> Gar
    metro.baglanti_ekle("T3", "T4", 5)  # Gar -> Keçiören

    # Hat aktarma bağlantıları (aynı istasyon farklı hatlar)
    metro.baglanti_ekle("K1", "M2", 2)  # Kızılay aktarma
    metro.baglanti_ekle("K3", "T2", 3)  # Demetevler aktarma
    metro.baglanti_ekle("M4", "T3", 2)  # Gar aktarma

    # Test senaryoları
    print("\n=== Test Senaryoları ===")

    # Senaryo 1: AŞTİ'den OSB'ye
    print("\n1. AŞTİ'den OSB'ye:")
    rota = metro.en_az_aktarma_bul("M1", "K4")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("M1", "K4")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))

    # Senaryo 2: Batıkent'ten Keçiören'e
    print("\n2. Batıkent'ten Keçiören'e:")
    rota = metro.en_az_aktarma_bul("T1", "T4")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("T1", "T4")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))

    # Senaryo 3: Keçiören'den AŞTİ'ye
    print("\n3. Keçiören'den AŞTİ'ye:")
    rota = metro.en_az_aktarma_bul("T4", "M1")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("T4", "M1")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))


    # Senaryo 4: Keçiören'den Demetevler'e
    print("\n4. Keçiören'den Demetevler'e:")
    rota = metro.en_az_aktarma_bul("T4", "T2")
    if rota:
        print("En az aktarmalı rota:", " -> ".join(i.ad for i in rota))

    sonuc = metro.en_hizli_rota_bul("T4", "T2")
    if sonuc:
        rota, sure = sonuc
        print(f"En hızlı rota ({sure} dakika):", " -> ".join(i.ad for i in rota))